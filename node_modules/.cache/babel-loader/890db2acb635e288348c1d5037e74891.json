{"ast":null,"code":"import axios from 'axios';\nimport queryString from 'query-string';\nconst axiosClient = axios.create({\n  baseURL: process.env.REACT_APP_API_URL_TEST,\n  headers: {\n    'content-type': 'application/json'\n  },\n  paramsSerializer: params => queryString.stringify(params)\n});\naxiosClient.interceptors.request.use(async config => {\n  const token = localStorage.getItem('access_token');\n\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  } // Handle token here ...\n\n\n  return config;\n});\naxiosClient.interceptors.response.use(response => {\n  if (response && response.đata) {\n    return response;\n  }\n\n  return response;\n}, error => {\n  // Handle errors\n  throw error;\n});\nexport default axiosClient;","map":{"version":3,"sources":["E:/Bit/dms_device/src/api/setup/axiosclient.js"],"names":["axios","queryString","axiosClient","create","baseURL","process","env","REACT_APP_API_URL_TEST","headers","paramsSerializer","params","stringify","interceptors","request","use","config","token","localStorage","getItem","Authorization","response","đata","error"],"mappings":"AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,cAAxB;AAEA,MAAMC,WAAW,GAAGF,KAAK,CAACG,MAAN,CAAa;AAC7BC,EAAAA,OAAO,EAAEC,OAAO,CAACC,GAAR,CAAYC,sBADQ;AAE7BC,EAAAA,OAAO,EAAE;AACL,oBAAgB;AADX,GAFoB;AAM7BC,EAAAA,gBAAgB,EAAEC,MAAM,IAAIT,WAAW,CAACU,SAAZ,CAAsBD,MAAtB;AANC,CAAb,CAApB;AASAR,WAAW,CAACU,YAAZ,CAAyBC,OAAzB,CAAiCC,GAAjC,CAAqC,MAAOC,MAAP,IAAkB;AACnD,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,cAArB,CAAd;;AACA,MAAIF,KAAJ,EAAW;AACPD,IAAAA,MAAM,CAACP,OAAP,CAAeW,aAAf,GAAgC,UAASH,KAAM,EAA/C;AACH,GAJkD,CAKnD;;;AACA,SAAOD,MAAP;AACH,CAPD;AAQAb,WAAW,CAACU,YAAZ,CAAyBQ,QAAzB,CAAkCN,GAAlC,CAAuCM,QAAD,IAAc;AAChD,MAAIA,QAAQ,IAAIA,QAAQ,CAACC,IAAzB,EAA+B;AAC3B,WAAOD,QAAP;AACH;;AACD,SAAOA,QAAP;AACH,CALD,EAKIE,KAAD,IAAW;AACV;AACA,QAAMA,KAAN;AACH,CARD;AASA,eAAepB,WAAf","sourcesContent":["\r\nimport axios from 'axios';\r\nimport queryString from 'query-string';\r\n\r\nconst axiosClient = axios.create({\r\n    baseURL: process.env.REACT_APP_API_URL_TEST,\r\n    headers: {\r\n        'content-type': 'application/json',\r\n\r\n    },\r\n    paramsSerializer: params => queryString.stringify(params),\r\n});\r\n\r\naxiosClient.interceptors.request.use(async (config) => {\r\n    const token = localStorage.getItem('access_token')\r\n    if (token) {\r\n        config.headers.Authorization = `Bearer ${token}`\r\n    }\r\n    // Handle token here ...\r\n    return config;\r\n})\r\naxiosClient.interceptors.response.use((response) => {\r\n    if (response && response.đata) {\r\n        return response\r\n    }\r\n    return response;\r\n}, (error) => {\r\n    // Handle errors\r\n    throw error;\r\n});\r\nexport default axiosClient;"]},"metadata":{},"sourceType":"module"}