{"ast":null,"code":"var _jsxFileName = \"E:\\\\Bit\\\\dms_device\\\\src\\\\routes\\\\ProtectedRoute.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport jwt_decode from \"jwt-decode\";\nimport { Route, Redirect, useLocation } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ProtectedRoute = ({\n  ROLE: roles,\n  component: Component,\n  ...rest\n}) => {\n  _s();\n\n  const isLogin = localStorage.getItem('isLogin');\n  const curentUser = jwt_decode(localStorage.getItem('access_token'));\n  let role = curentUser.is_admin ? 'admin' : 'user';\n  let compare = roles.includes(role);\n  const location = useLocation();\n\n  if (!compare) {\n    return /*#__PURE__*/_jsxDEV(Redirect, {\n      to: {\n        pathname: '/devices'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Route, { ...rest,\n    render: props => {\n      if (isLogin) {\n        return /*#__PURE__*/_jsxDEV(Component, { ...props\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 24\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(Redirect, {\n          to: {\n            pathname: '/login',\n            state: {\n              from: location\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 24\n        }, this);\n      }\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ProtectedRoute, \"pkHmaVRPskBaU4tMJuJJpV42k1I=\", false, function () {\n  return [useLocation];\n});\n\n_c = ProtectedRoute;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"sources":["E:/Bit/dms_device/src/routes/ProtectedRoute.js"],"names":["React","jwt_decode","Route","Redirect","useLocation","ProtectedRoute","ROLE","roles","component","Component","rest","isLogin","localStorage","getItem","curentUser","role","is_admin","compare","includes","location","pathname","props","state","from"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,KAAT,EAAgBC,QAAhB,EAA0BC,WAA1B,QAA6C,kBAA7C;;AAEA,OAAO,MAAMC,cAAc,GAAG,CAAC;AAAEC,EAAAA,IAAI,EAAEC,KAAR;AAAeC,EAAAA,SAAS,EAAEC,SAA1B;AAAqC,KAAGC;AAAxC,CAAD,KAAoD;AAAA;;AAC9E,QAAMC,OAAO,GAAGC,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAhB;AAEA,QAAMC,UAAU,GAAGb,UAAU,CAACW,YAAY,CAACC,OAAb,CAAqB,cAArB,CAAD,CAA7B;AAEA,MAAIE,IAAI,GAAGD,UAAU,CAACE,QAAX,GAAsB,OAAtB,GAAgC,MAA3C;AAEA,MAAIC,OAAO,GAAGV,KAAK,CAACW,QAAN,CAAeH,IAAf,CAAd;AAEA,QAAMI,QAAQ,GAAGf,WAAW,EAA5B;;AAEA,MAAI,CAACa,OAAL,EAAc;AACV,wBAAO,QAAC,QAAD;AAAU,MAAA,EAAE,EACf;AACIG,QAAAA,QAAQ,EAAE;AADd;AADG;AAAA;AAAA;AAAA;AAAA,YAAP;AAMH;;AACD,sBACI,QAAC,KAAD,OAAWV,IAAX;AAAiB,IAAA,MAAM,EAAEW,KAAK,IAAI;AAC9B,UAAIV,OAAJ,EAAa;AACT,4BAAO,QAAC,SAAD,OAAeU;AAAf;AAAA;AAAA;AAAA;AAAA,gBAAP;AACH,OAFD,MAEO;AACH,4BAAO,QAAC,QAAD;AAAU,UAAA,EAAE,EACf;AACID,YAAAA,QAAQ,EAAE,QADd;AAEIE,YAAAA,KAAK,EAAE;AACHC,cAAAA,IAAI,EAAEJ;AADH;AAFX;AADG;AAAA;AAAA;AAAA;AAAA,gBAAP;AASH;AACJ;AAdD;AAAA;AAAA;AAAA;AAAA,UADJ;AAiBH,CApCM;;GAAMd,c;UASQD,W;;;KATRC,c","sourcesContent":["import React from 'react'\r\nimport jwt_decode from \"jwt-decode\";\r\nimport { Route, Redirect, useLocation } from 'react-router-dom'\r\n\r\nexport const ProtectedRoute = ({ ROLE: roles, component: Component, ...rest }) => {\r\n    const isLogin = localStorage.getItem('isLogin')\r\n\r\n    const curentUser = jwt_decode(localStorage.getItem('access_token'))\r\n\r\n    let role = curentUser.is_admin ? 'admin' : 'user';\r\n\r\n    let compare = roles.includes(role)\r\n\r\n    const location = useLocation()\r\n\r\n    if (!compare) {\r\n        return <Redirect to={\r\n            {\r\n                pathname: '/devices'\r\n            }\r\n        }\r\n        />\r\n    }\r\n    return (\r\n        <Route {...rest} render={props => {\r\n            if (isLogin) {\r\n                return <Component {...props} />\r\n            } else {\r\n                return <Redirect to={\r\n                    {\r\n                        pathname: '/login',\r\n                        state: {\r\n                            from: location\r\n                        }\r\n                    }\r\n                }\r\n                />\r\n            }\r\n        }} />\r\n    )\r\n}\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}